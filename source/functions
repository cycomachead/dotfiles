# Gradescope Docker Runner
function review_branch() {
    docker run --rm -it -p 3001:3000 \
        --entrypoint=/bin/bash gradescope/dev \
        -c "cd ~/gradescope-app; git fetch; git pull; .ci/review_branch.sh $1"
}

# More docker stuff because Docker is annoying.
alias dc=docker-compose
alias dc-ssh='docker-compose exec web bash'

function docker-quit() {
    test -z "$(docker ps -q 2>/dev/null)" && osascript -e 'quit app "Docker"'
}

function docker-start() {
    open --background -a Docker &&
      while ! docker system info > /dev/null 2>&1; do sleep 1; done
      echo 'Docker is ready...'
}

function docker-stop-all() {
    docker ps -q | xargs -L1 docker stop
}

function gs-docker() {
    docker-start
    docker-sync start --daemon
    dc up
    dc-ssh
}


# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo # newline
	fi
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo # newline
	fi
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'title' 'body'` or `echo 'body' | note`
# Title is optional
function note() {
	local title
	local body
	if [ -t 0 ]; then
		title="$1"
		body="$2"
	else
		title=$(cat)
	fi
	osascript >/dev/null <<EOF
tell application "Notes"
	tell account "iCloud"
		tell folder "Notes"
			make new note with properties {name:"$title", body:"$title" & "<br><br>" & "$body"}
		end tell
	end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
	tell the default list
		make new reminder with properties {name:"$text"}
	end tell
end tell
EOF
}
